version: '3.8'

services:
  # Base de datos PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: pedidos_db_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - pedidos_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Django
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: pedidos_backend_prod
    restart: unless-stopped
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 3
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - ALLOWED_HOSTS=orders.mitzori.com,localhost
      - CORS_ALLOWED_ORIGINS=https://orders.mitzori.com
      - CSRF_TRUSTED_ORIGINS=https://orders.mitzori.com
    depends_on:
      db:
        condition: service_healthy
    networks:
      - pedidos_network

  # Frontend Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: pedidos_frontend_prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://orders.mitzori.com/api
    depends_on:
      - backend
    networks:
      - pedidos_network

  # Caddy - Reverse Proxy y SSL autom√°tico
  caddy:
    image: caddy:2-alpine
    container_name: pedidos_caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"  # HTTP/3
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
      - caddy_logs:/var/log/caddy
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
    depends_on:
      - backend
      - frontend
    networks:
      - pedidos_network

volumes:
  postgres_data_prod:
  static_volume:
  media_volume:
  caddy_data:
  caddy_config:
  caddy_logs:

networks:
  pedidos_network:
    driver: bridge
